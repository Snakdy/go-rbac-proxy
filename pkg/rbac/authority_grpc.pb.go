// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/rbac/authority.proto

package rbac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityClient is the client API for Authority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityClient interface {
	Can(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddGlobalRole(ctx context.Context, in *AddGlobalRoleRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	ListBySub(ctx context.Context, in *ListBySubRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListByRole(ctx context.Context, in *ListByRoleRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type authorityClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityClient(cc grpc.ClientConnInterface) AuthorityClient {
	return &authorityClient{cc}
}

func (c *authorityClient) Can(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/api.Authority/Can", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/api.Authority/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) AddGlobalRole(ctx context.Context, in *AddGlobalRoleRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/api.Authority/AddGlobalRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) ListBySub(ctx context.Context, in *ListBySubRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.Authority/ListBySub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityClient) ListByRole(ctx context.Context, in *ListByRoleRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.Authority/ListByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServer is the server API for Authority service.
// All implementations must embed UnimplementedAuthorityServer
// for forward compatibility
type AuthorityServer interface {
	Can(context.Context, *AccessRequest) (*GenericResponse, error)
	AddRole(context.Context, *AddRoleRequest) (*GenericResponse, error)
	AddGlobalRole(context.Context, *AddGlobalRoleRequest) (*GenericResponse, error)
	ListBySub(context.Context, *ListBySubRequest) (*ListResponse, error)
	ListByRole(context.Context, *ListByRoleRequest) (*ListResponse, error)
	mustEmbedUnimplementedAuthorityServer()
}

// UnimplementedAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityServer struct {
}

func (UnimplementedAuthorityServer) Can(context.Context, *AccessRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Can not implemented")
}
func (UnimplementedAuthorityServer) AddRole(context.Context, *AddRoleRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedAuthorityServer) AddGlobalRole(context.Context, *AddGlobalRoleRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGlobalRole not implemented")
}
func (UnimplementedAuthorityServer) ListBySub(context.Context, *ListBySubRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySub not implemented")
}
func (UnimplementedAuthorityServer) ListByRole(context.Context, *ListByRoleRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByRole not implemented")
}
func (UnimplementedAuthorityServer) mustEmbedUnimplementedAuthorityServer() {}

// UnsafeAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityServer will
// result in compilation errors.
type UnsafeAuthorityServer interface {
	mustEmbedUnimplementedAuthorityServer()
}

func RegisterAuthorityServer(s grpc.ServiceRegistrar, srv AuthorityServer) {
	s.RegisterService(&Authority_ServiceDesc, srv)
}

func _Authority_Can_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).Can(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authority/Can",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).Can(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authority/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_AddGlobalRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGlobalRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).AddGlobalRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authority/AddGlobalRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).AddGlobalRole(ctx, req.(*AddGlobalRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_ListBySub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).ListBySub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authority/ListBySub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).ListBySub(ctx, req.(*ListBySubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authority_ListByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServer).ListByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authority/ListByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServer).ListByRole(ctx, req.(*ListByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authority_ServiceDesc is the grpc.ServiceDesc for Authority service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authority_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Authority",
	HandlerType: (*AuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Can",
			Handler:    _Authority_Can_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _Authority_AddRole_Handler,
		},
		{
			MethodName: "AddGlobalRole",
			Handler:    _Authority_AddGlobalRole_Handler,
		},
		{
			MethodName: "ListBySub",
			Handler:    _Authority_ListBySub_Handler,
		},
		{
			MethodName: "ListByRole",
			Handler:    _Authority_ListByRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rbac/authority.proto",
}
